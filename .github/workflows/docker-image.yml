name: Docker Image CI

on:
  push:
    branches: [ "22-setup-github-actions" ]
  pull_request:
    branches: [ "22-setup-github-actions" ]

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and deploy the app Docker image
      working-directory: ./app
      run: ./buildimage.sh
    - name: Create crt.crt
      working-directory: ./nginx
      id: secret-file1
      run: |
        mkdir ./certs
        $secretFile = Join-Path -Path ./certs -ChildPath "crt.crt"; 
        $encodedBytes = [System.Convert]::FromBase64String($env:NGINX_SSL_CRT); 
        Set-Content $secretFile -Value $encodedBytes -AsByteStream;
        $secretFileHash = Get-FileHash $secretFile;
        Write-Output "::set-output name=SECRET_FILE::$secretFile";
        Write-Output "::set-output name=SECRET_FILE_HASH::$($secretFileHash.Hash)";
        Write-Output "Secret file $secretFile has hash $($secretFileHash.Hash)";
      shell: pwsh
      env:
        NGINX_SSL_CRT: ${{ NGINX_SSL_CRT }}
    - name: Create crt.key
      working-directory: ./nginx
      id: secret-file1
      run: |
        mkdir ./certs
        $secretFile = Join-Path -Path ./certs -ChildPath "crt.key"; 
        $encodedBytes = [System.Convert]::FromBase64String($env:NGINX_SSL_CRT); 
        Set-Content $secretFile -Value $encodedBytes -AsByteStream;
        $secretFileHash = Get-FileHash $secretFile;
        Write-Output "::set-output name=SECRET_FILE::$secretFile";
        Write-Output "::set-output name=SECRET_FILE_HASH::$($secretFileHash.Hash)";
        Write-Output "Secret file $secretFile has hash $($secretFileHash.Hash)";
      shell: pwsh
      env:
        NGINX_SSL_CRT: ${{ NGINX_SSL_KEY }}

    - name: Build and deploy the nginx Docker image
      working-directory: ./nginx
      run: ./buildimage.sh
